---
title: "Iterative Temporal Graph Neural Network extension"
author: "SEOYEON CHOI"
format: 
    dashboard:
     theme: default
     nav-buttons:
      - icon: github
        href: https://github.com/seoyeonc
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---


```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import itables 
from plotnine import ggplot, aes, geom_boxplot, scale_fill_manual, theme, element_blank, element_text, labs, facet_wrap, scale_x_continuous

# GConvGRU
pedal_wiki_GSO_GConvGRU = pd.read_csv('./Data/Final_Simulation_GConvGRU_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GConvGRU['model']='GConvGRU'

# GConvLSTM
pedal_wiki_GSO_GConvLSTM = pd.read_csv('./Data/Final_Simulation_GConvLSTM_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GConvLSTM['model']='GConvLSTM'

# GCLSTM
pedal_wiki_GSO_GCLSTM = pd.read_csv('./Data/Final_Simulation_GCLSTM_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GCLSTM['model']='GCLSTM'

# DCRNN
pedal_wiki_GSO_DCRNN = pd.read_csv('./Data/Final_Simulation_DCRNN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_DCRNN['model']='DCRNN'

# LRGCN
pedal_wiki_GSO_LRGCN = pd.read_csv('./Data/Final_Simulation_LRGCN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_LRGCN['model']='LRGCN'

# TGCN
pedal_wiki_GSO_TGCN = pd.read_csv('./Data/Final_Simulation_TGCN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_TGCN['model']='TGCN'

# EvolveGCNO
pedal_wiki_GSO_EvolveGCNO = pd.read_csv('./Data/Final_Simulation_EvolveGCNO_pedal_wiki_GSO.csv')
pedal_wiki_GSO_EvolveGCNO['model']='EvolveGCNO'

# DYGRENCODER
pedal_wiki_GSO_DYGRENCODER = pd.read_csv('./Data/Final_Simulation_DYGRENCODER_pedal_wiki_GSO.csv')
pedal_wiki_GSO_DYGRENCODER['model']='DyGrEncoder'

# EvolveGCNH
pedal_wiki_GSO_EvolveGCNH = pd.read_csv('./Data/Final_Simulation_EvolveGCNH_pedal_wiki_GSO.csv')
pedal_wiki_GSO_EvolveGCNH['model']='EvolveGCNH'

# GNAR
wiki_GSO_GNAR = pd.read_csv('./Data/Final_Simulation_GNAR_wiki_GSO.csv')
wiki_GSO_GNAR['model']='GNAR'

df = pd.read_csv('./Data/df_fig.csv')

df2 = pd.concat([pedal_wiki_GSO_GConvGRU,pedal_wiki_GSO_GConvLSTM,pedal_wiki_GSO_GCLSTM,pedal_wiki_GSO_DCRNN,pedal_wiki_GSO_LRGCN,pedal_wiki_GSO_TGCN,pedal_wiki_GSO_EvolveGCNO,pedal_wiki_GSO_DYGRENCODER,pedal_wiki_GSO_EvolveGCNH,wiki_GSO_GNAR])

```

# FiveVTS

## Column {width=50%}

### Row {.tabset}


```{python}
#| title: Baseline Data

FiveVTS_baseline = pd.merge(df.query("dataset=='fivenodes' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters','lags','epoch'])['mse'].mean().reset_index(),
         df.query("dataset=='fivenodes' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters','lags','epoch'])['mse'].std().reset_index(),
         on=['model','nof_filters','lags','epoch']).rename(columns={'mse_x':'mean','mse_y':'std'})

itables.show(FiveVTS_baseline)

```

```{python}
#| title: Random Missing Data

FiveVTS_random = pd.merge(df.query("dataset=='fivenodes' and mtype=='rand'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].mean().reset_index(),
         df.query("dataset=='fivenodes' and mtype=='rand'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].std().reset_index(),
         on=['model','inter_method','method','nof_filters','mrate','lags','epoch']).rename(columns={'mse_x':'mean','mse_y':'std'}).query("mrate==0.7 and inter_method=='linear'")
itables.show(FiveVTS_random)

```

### Row {.tabset}

```{python}
#| title: Block Missing Data

FiveVTS_block = pd.merge(df.query("dataset=='fivenodes' and mtype=='block'").groupby(['model','mrate','nof_filters','inter_method','method','epoch'])['mse'].mean().reset_index(),
         df.query("dataset=='fivenodes' and mtype=='block'").groupby(['model','mrate','nof_filters','inter_method','method','epoch'])['mse'].std().reset_index(),
         on=['model','inter_method','method','nof_filters','mrate','epoch']).rename(columns={'mse_x':'mean','mse_y':'std'}).query("inter_method=='linear'")
itables.show(FiveVTS_block)

```

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Random Missing Figure



```

### Row {.tabset}

```{python}
#| title: Block Missing Figure

```





# Chickenpox

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Baseline Data

Chickenpox_baseline = pd.merge(df.query("dataset=='chickenpox' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='chickenpox' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters'])['mse'].std().reset_index(),
         on=['model','nof_filters']).rename(columns={'mse_x':'mean','mse_y':'std'})
itables.show(Chickenpox_baseline)
         

```

```{python}
#| title: Random Missing Data

Chickenpox_random = pd.merge(df.query("dataset=='chickenpox' and mtype=='rand'").groupby(['model','mrate','inter_method','nof_filters','method'])['mse'].mean().reset_index(),
         df.query("dataset=='chickenpox' and mtype=='rand'").groupby(['model','mrate','inter_method','nof_filters','method'])['mse'].std().reset_index(),
         on=['model','method','inter_method','mrate','nof_filters']).rename(columns={'mse_x':'mean','mse_y':'std'})
itables.show(Chickenpox_random)
```

### Row {.tabset}

```{python}

Chickenpox_block = pd.merge(df.query("dataset=='chickenpox' and mtype=='block'").groupby(['model','inter_method','mrate','nof_filters','method'])['mse'].mean().reset_index(),
         df.query("dataset=='chickenpox' and mtype=='block'").groupby(['model','inter_method','mrate','nof_filters','method'])['mse'].std().reset_index(),
         on=['model','method','inter_method','mrate','nof_filters']).rename(columns={'mse_x':'mean','mse_y':'std'}).query("inter_method=='linear'")
itables.show(Chickenpox_block)


```

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Random Missing Figure

```

### Row {.tabset}

```{python}
#| title: Block Missing Figure
```




# Pedalme

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Baseline Data

Pedalme_baseline = pd.merge(df.query("dataset=='pedalme' and mtype!='rand' and mtype!='block'").groupby(['model','lags','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='pedalme' and mtype!='rand' and mtype!='block'").groupby(['model','lags','nof_filters'])['mse'].std().reset_index(),
         on=['model','lags','nof_filters']).rename(columns={'mse_x':'mean','mse_y':'std'}).query("lags==4")
        
itables.show(Pedalme_baseline)

```

```{python}
#| title: Random Missing Data

Pedalme_Random = pd.merge(df.query("dataset=='pedalme' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='pedalme' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','method','mrate','lags','inter_method']).rename(columns={'mse_x':'mean','mse_y':'std'}).query("inter_method=='nearest'")
itables.show(Pedalme_Random)

```

### Row {.tabset}

```{python}
#| title: Block Missing Data

Pedalme_block = pd.merge(df.query("dataset=='pedalme' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='pedalme' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','method','mrate','lags','inter_method']).rename(columns={'mse_x':'mean','mse_y':'std'}).query("lags==4 and inter_method=='nearest'")
itables.show(Pedalme_block)

```

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Random Missing Figure
```


### Row {.tabset}

```{python}
#| title: Block Missing Figure
```


# Wikimath

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Baseline Data

Wikimath_baseline = pd.merge(df.query("dataset=='wikimath' and mrate==0").groupby(['model','lags','nof_filters','method'])['mse'].mean().reset_index(),
         df.query("dataset=='wikimath' and mrate==0").groupby(['model','lags','nof_filters','method'])['mse'].std().reset_index(),
         on=['model','lags','nof_filters','method']).rename(columns={'mse_x':'mean','mse_y':'std'})

itables.show(Wikimath_baseline)

```

```{python}
#| title: Random Missing Data

Wikimath_random = pd.merge(df.query("dataset=='wikimath' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='wikimath' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags']).rename(columns={'mse_x':'mean','mse_y':'std'})

itables.show(Wikimath_random)
```

### Row {.tabset}

```{python}
#| title: Block Missing Data

Wikimath_block = pd.merge(df.query("dataset=='wikimath' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='wikimath' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags']).rename(columns={'mse_x':'mean','mse_y':'std'})
itables.show(Wikimath_block)

```

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Random Missing Figure
```


```{python}
#| title: Block Missing Figure
```


# Windmillsmall

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Baseline Data

Windmillsmall_baseline = pd.merge(df.query("dataset=='windmillsmall' and mrate==0").groupby(['model','lags'])['mse'].mean().reset_index(),
         df.query("dataset=='windmillsmall' and mrate==0").groupby(['model','lags'])['mse'].std().reset_index(),
         on=['model','lags']).rename(columns={'mse_x':'mean','mse_y':'std'})
itables.show(Windmillsmall_baseline)

```

```{python}
#| title: Random Missing Data

Windmillsmall_random = pd.merge(df.query("dataset=='windmillsmall' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='windmillsmall' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags']).rename(columns={'mse_x':'mean','mse_y':'std'})

itables.show(Windmillsmall_random)
```

### Row {.tabset}

```{python}
#| title: Block Missing Data

Windmillsmall_block = pd.merge(df.query("dataset=='windmillsmall' and mtype=='block'").groupby(['model','mrate','nof_filters','lags','method'])['mse'].mean().reset_index(),
         df.query("dataset=='windmillsmall' and mtype=='block'").groupby(['model','mrate','nof_filters','lags','method'])['mse'].std().reset_index(),
         on=['model','method','nof_filters','mrate','lags']).rename(columns={'mse_x':'mean','mse_y':'std'})

itables.show(Windmillsmall_block)
```


## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Random Missing Figure

```


```{python}
#| title: Block Missing Figure

```


# MontevideoBus

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Baseline Data
MontevideoBus_baseline = pd.merge(df.query("dataset=='monte' and mrate==0").groupby(['model','lags'])['mse'].mean().reset_index(),
         df.query("dataset=='monte' and mrate==0").groupby(['model','lags'])['mse'].std().reset_index(),
         on=['model','lags']).rename(columns={'mse_x':'mean','mse_y':'std'})

itables.show()         
```

```{python}
#| title: Random Missing Data

MontevideoBus_random = pd.merge(df.query("dataset=='monte' and mtype=='rand'").groupby(['model','mrate','nof_filters','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='monte' and mtype=='rand'").groupby(['model','mrate','nof_filters','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','mrate','nof_filters','inter_method','method','mrate','lags']).rename(columns={'mse_x':'mean','mse_y':'std'})

itables.show(MontevideoBus_random)
```

### Row {.tabset}

```{python}

#| title: Block Missing Data

MontevideoBus_block = pd.merge(df.query("dataset=='monte' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='monte' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags']).rename(columns={'mse_x':'mean','mse_y':'std'}).query("inter_method=='nearest'")

itables.show(MontevideoBus_block)
```


## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Random Missing Figure

```


```{python}
#| title: Block Missing Figure

```

