---
title: "Iterative Temporal Graph Neural Network extension"
author: "SEOYEON CHOI"
format: 
    dashboard:
     theme: default
     nav-buttons:
      - icon: github
        href: https://github.com/seoyeonc
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---


```{python}
import pandas as pd
import matplotlib.pyplot as plt

# GConvGRU
pedal_wiki_GSO_GConvGRU = pd.read_csv('./Data/Final_Simulation_GConvGRU_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GConvGRU['model']='GConvGRU'

# GConvLSTM
pedal_wiki_GSO_GConvLSTM = pd.read_csv('./Data/Final_Simulation_GConvLSTM_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GConvLSTM['model']='GConvLSTM'

# GCLSTM
pedal_wiki_GSO_GCLSTM = pd.read_csv('./Data/Final_Simulation_GCLSTM_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GCLSTM['model']='GCLSTM'

# DCRNN
pedal_wiki_GSO_DCRNN = pd.read_csv('./Data/Final_Simulation_DCRNN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_DCRNN['model']='DCRNN'

# LRGCN
pedal_wiki_GSO_LRGCN = pd.read_csv('./Data/Final_Simulation_LRGCN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_LRGCN['model']='LRGCN'

# TGCN
pedal_wiki_GSO_TGCN = pd.read_csv('./Data/Final_Simulation_TGCN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_TGCN['model']='TGCN'

# EvolveGCNO
pedal_wiki_GSO_EvolveGCNO = pd.read_csv('./Data/Final_Simulation_EvolveGCNO_pedal_wiki_GSO.csv')
pedal_wiki_GSO_EvolveGCNO['model']='EvolveGCNO'

# DYGRENCODER
pedal_wiki_GSO_DYGRENCODER = pd.read_csv('./Data/Final_Simulation_DYGRENCODER_pedal_wiki_GSO.csv')
pedal_wiki_GSO_DYGRENCODER['model']='DyGrEncoder'

# EvolveGCNH
pedal_wiki_GSO_EvolveGCNH = pd.read_csv('./Data/Final_Simulation_EvolveGCNH_pedal_wiki_GSO.csv')
pedal_wiki_GSO_EvolveGCNH['model']='EvolveGCNH'

# GNAR
wiki_GSO_GNAR = pd.read_csv('./Data/Final_Simulation_GNAR_wiki_GSO.csv')
wiki_GSO_GNAR['model']='GNAR'

df = pd.read_csv('./df_fig.csv')

df2 = pd.concat([pedal_wiki_GSO_GConvGRU,pedal_wiki_GSO_GConvLSTM,pedal_wiki_GSO_GCLSTM,pedal_wiki_GSO_DCRNN,pedal_wiki_GSO_LRGCN,pedal_wiki_GSO_TGCN,pedal_wiki_GSO_EvolveGCNO,pedal_wiki_GSO_DYGRENCODER,pedal_wiki_GSO_EvolveGCNH,wiki_GSO_GNAR])

```

# Fivenodes

## Column {width=50%}

### Row {.tabset}

```{python}
#| title: Fivenodes

itables.show(pd.merge(df.query("dataset=='fivenodes' and mtype=='rand'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].mean().reset_index(),
         df.query("dataset=='fivenodes' and mtype=='rand'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].std().reset_index(),
         on=['model','inter_method','method','nof_filters','mrate','lags','epoch']).rename(columns={'mse_x':'mean','mse_y':'std'}).round(3).query("mrate==0.7 and inter_method=='linear'"))
```

### Row {.tabset}

```{python}

filter_condition = (
    (df['dataset'] == 'fivenodes') &
    (df['mtype'] == 'rand') &
    (df['inter_method'] == 'linear') &
    (df['lags'] == 2) &
    (df['epoch'] == 50) &
    (df['mrate'].isin([0.3, 0.5, 0.6, 0.7, 0.8]))
)

model_conditions = [
    'GConvGRU', 'GConvLSTM', 'GCLSTM', 'LRGCN', 'DyGrEncoder', 'EvolveGCNH', 'EvolveGCNO', 'TGCN', 'DCRNN'
]

fivenodes = df[filter_condition & df['model'].isin(model_conditions)]

model_order = ["GConvGRU", "GConvLSTM", "GCLSTM", "LRGCN", "DyGrEncoder", "EvolveGCNH", "EvolveGCNO", "TGCN", "DCRNN"]
fivenodes['model'] = pd.Categorical(fivenodes['model'], categories=model_order, ordered=True)
fivenodes['method'] = pd.Categorical(fivenodes['method'], categories=['STGCN', 'IT-STGCN'], ordered=True)

```